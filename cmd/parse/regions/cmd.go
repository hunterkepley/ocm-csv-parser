package regions

import (
	"fmt"

	"github.com/openshift-online/ocm-csv-parser/pkg/convert"
	"github.com/spf13/cobra"
)

var args struct {
	file   string
	output string
}

func init() {
	flags := Cmd.Flags()

	flags.StringVarP(
		&args.file,
		"file",
		"f",
		"/tmp/cloudresources.csv",
		"The path-to-file for the CSV that is being parsed",
	)

	flags.StringVarP(
		&args.output,
		"output",
		"o",
		"output/cloud-resources.configmap.yaml",
		"This defines the path + filename of the output (yaml configmap)",
	)
}

var Cmd = &cobra.Command{
	Use:     "regions",
	Aliases: []string{"r", "cloud-regions", "cloudregions"},
	Short:   "Parses regions CSV into a configmap yaml file",
	Long: "Parses cloud regions CSV (by default, in /tmp/) into a complete config map to be used with the" +
		" cloud resource service. To use a specific file not generated by the download command, use the flag" +
		" --file <PATH/TO/FILE_NAME>. You can also specify an output folder using --output <PATH/TO/FILE_NAME>",
	RunE: run,
}

func run(cmd *cobra.Command, _ []string) (err error) {
	fmt.Printf("Parsing CSV (%s) into cloud resources...\n\n", args.file)
	resources, err := convert.RegionsCsvToResources(args.file)
	if err != nil {
		fmt.Printf("Unable to create resources from csv file: %v\n", err)
		return err
	}
	fmt.Printf("Converting %d resources into configmap yaml...\n\n", len(resources))
	err = convert.ResourcesToYamlRegions(resources, args.output)
	if err != nil {
		fmt.Printf("Unable to create configmap from resources generated: %v\n", err)
		return err
	}

	fmt.Printf("Finished converting, location of configmap: '%s'\n\n", args.output)

	return nil
}
